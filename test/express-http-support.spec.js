var {
	it,
	its,
	report
} = require("assertivity").generate();
var request = require("request");
var app = require("express")();
var httpSupport = require(__dirname + "/../src/express-http-support.js");

app.use(httpSupport.status.middleware);
app.use(httpSupport.headers.middleware);

app.get("/", function(req, res, next) {
	res.headerAccept("application/json");
	res.headerAcceptCharset("utf8");
	res.headerAcceptEncoding("utf8");
	res.headerAcceptLanguage("*");
	res.headerAcceptDatetime("*");
	res.headerAccessControlRequestMethod("*");
	res.headerAccessControlRequestHeaders("*");
	res.headerAuthorization("Basic blablabla");
	res.headerCacheControl("no-cache");
	res.headerConnection("*");
	res.headerCookie("*");
	res.headerContentLength("*");
	res.headerContentMD5("*");
	res.headerContentType("application/json");
	res.headerDate("*");
	res.headerExpect("*");
	res.headerForwarded("*");
	res.headerFrom("*");
	res.headerHost("*");
	res.headerIfMatch("*");
	res.headerIfModifiedSince("*");
	res.headerIfNoneMatch("*");
	res.headerIfRange("*");
	res.headerIfUnmodifiedSince("*");
	res.headerMaxForwards("*");
	res.headerOrigin("*");
	res.headerPragma("*");
	res.headerProxyAuthorization("*");
	res.headerRange("*");
	res.headerRefererÂ ("*");
	res.headerTE("*");
	res.headerUserAgent("*");
	res.headerUpgrade("*");
	res.headerVia("*");
	res.headerWarning("*");
	res.headerUpgradeInsecureRequests("*");
	res.headerXRequestedWith("*");
	res.headerDNT("*");
	res.headerXForwardedFor("*");
	res.headerXForwardedHost("*");
	res.headerXForwardedProto("*");
	res.headerFrontEndHttps("*");
	res.headerXHttpMethodOverride("*");
	res.headerXATTDeviceId("*");
	res.headerXWapProfile("*");
	res.headerProxyConnection("*");
	res.headerXUIDH("*");
	res.headerXCsrfToken("*");
	res.headerXRequestID("*");
	res.headerXCorrelationID("*");
	res.headerAccessControlAllowOrigin("*");
	res.headerAccessControlAllowCredentials("*");
	res.headerAccessControlExposeHeaders("*");
	res.headerAccessControlMaxAge("*");
	res.headerAccessControlAllowMethods("*");
	res.headerAccessControlAllowHeaders("*");
	res.headerAcceptPatch("*");
	res.headerAcceptRanges("*");
	res.headerAge("*");
	res.headerAllow("*");
	res.headerAltSvc("*");
	res.headerCacheControl("*");
	res.headerConnection("*");
	res.headerContentDisposition("*");
	res.headerContentEncoding("utf8");
	res.headerContentLanguage("*");
	res.headerContentLength("*");
	res.headerContentLocation("*");
	res.headerContentMD5("*");
	res.headerContentRange("*");
	res.headerContentType("application/json");
	res.headerDate("*");
	res.headerETag("*");
	res.headerExpires("*");
	res.headerLastModified("*");
	res.headerLink("*");
	res.headerLocation("*");
	res.headerP3P("*");
	res.headerPragma("*");
	res.headerProxyAuthenticate("*");
	res.headerPublicKeyPins("*");
	res.headerRetryAfter("*");
	res.headerServer("*");
	res.headerSetCookie("*");
	res.headerStrictTransportSecurity("*");
	res.headerTrailer("*");
	res.headerTransferEncoding("*");
	res.headerTk("*");
	res.headerUpgrade("*");
	res.headerVary("*");
	res.headerVia("*");
	res.headerWarning("*");
	res.headerWWWAuthenticate("*");
	res.headerXFrameOptions("*");
	res.statusContinue();
	res.statusSwitchingProtocols();
	res.statusProcessing();
	res.statusEarlyHints();
	res.statusUnassigned();
	res.statusOK();
	res.statusCreated();
	res.statusAccepted();
	res.statusNonAuthoritativeInformation();
	res.statusNoContent();
	res.statusResetContent();
	res.statusPartialContent();
	res.statusMultiStatus();
	res.statusAlreadyReported();
	res.statusUnassigned();
	res.statusIMUsed();
	res.statusUnassigned();
	res.statusMultipleChoices();
	res.statusMovedPermanently();
	res.statusFound();
	res.statusSeeOther();
	res.statusNotModified();
	res.statusUseProxy();
	res.statusUnused();
	res.statusTemporaryRedirect();
	res.statusPermanentRedirect();
	res.statusUnassigned();
	res.statusBadRequest();
	res.statusUnauthorized();
	res.statusPaymentRequired();
	res.statusForbidden();
	res.statusNotFound();
	res.statusMethodNotAllowed();
	res.statusNotAcceptable();
	res.statusProxyAuthenticationRequired();
	res.statusRequestTimeout();
	res.statusConflict();
	res.statusGone();
	res.statusLengthRequired();
	res.statusPreconditionFailed();
	res.statusPayloadTooLarge();
	res.statusURITooLong();
	res.statusUnsupportedMediaType();
	res.statusRangeNotSatisfiable();
	res.statusExpectationFailed();
	res.statusUnassigned();
	res.statusMisdirectedRequest();
	res.statusUnprocessableEntity();
	res.statusLocked();
	res.statusFailedDependency();
	res.statusUnassigned();
	res.statusUpgradeRequired();
	res.statusUnassigned();
	res.statusPreconditionRequired();
	res.statusTooManyRequests();
	res.statusUnassigned();
	res.statusRequestHeaderFieldsTooLarge();
	res.statusUnassigned();
	res.statusUnavailableForLegalReasons();
	res.statusUnassigned();
	res.statusInternalServerError();
	res.statusNotImplemented();
	res.statusBadGateway();
	res.statusServiceUnavailable();
	res.statusGatewayTimeout();
	res.statusHTTPVersionNotSupported();
	res.statusVariantAlsoNegotiates();
	res.statusInsufficientStorage();
	res.statusLoopDetected();
	res.statusUnassigned();
	res.statusNotExtended();
	res.statusNetworkAuthenticationRequired();
	res.statusUnassigned();
	res.send({});
});

var server = app.listen(8008);

// Client:
request("http://localhost:8008/", function(req, res) {
	report.as("Headers returned as object").that.it(res.headers).is.object();
	report.as("Headers is not empty").that.it.is.not.empty();
	report.as("Headers contain Content-Type").that.it.has("content-type");
	report.as("Headers contain Accept").that.it.has.key("Accept".toLowerCase());
	report.as("Headers contain Accept-Charset").that.it.has.key("Accept-Charset".toLowerCase());
	report.as("Headers contain Accept-Encoding").that.it.has.key("Accept-Encoding".toLowerCase());
	report.as("Headers contain Accept-Language").that.it.has.key("Accept-Language".toLowerCase());
	report.as("Headers contain Accept-Datetime").that.it.has.key("Accept-Datetime".toLowerCase());
	report.as("Headers contain Access-Control-Request-Method").that.it.has.key("Access-Control-Request-Method".toLowerCase());
	report.as("Headers contain Access-Control-Request-Headers").that.it.has.key("Access-Control-Request-Headers".toLowerCase());
	report.as("Headers contain Authorization").that.it.has.key("Authorization".toLowerCase());
	report.as("Headers contain Cache-Control").that.it.has.key("Cache-Control".toLowerCase());
	report.as("Headers contain Connection").that.it.has.key("Connection".toLowerCase());
	report.as("Headers contain Cookie").that.it.has.key("Cookie".toLowerCase());
	report.as("Headers contain Content-Length").that.it.has.key("Content-Length".toLowerCase());
	report.as("Headers contain Content-MD5").that.it.has.key("Content-MD5".toLowerCase());
	report.as("Headers contain Content-Type").that.it.has.key("Content-Type".toLowerCase());
	report.as("Headers contain Date").that.it.has.key("Date".toLowerCase());
	report.as("Headers contain Expect").that.it.has.key("Expect".toLowerCase());
	report.as("Headers contain Forwarded").that.it.has.key("Forwarded".toLowerCase());
	report.as("Headers contain From").that.it.has.key("From".toLowerCase());
	report.as("Headers contain Host").that.it.has.key("Host".toLowerCase());
	report.as("Headers contain If-Match").that.it.has.key("If-Match".toLowerCase());
	report.as("Headers contain If-Modified-Since").that.it.has.key("If-Modified-Since".toLowerCase());
	report.as("Headers contain If-None-Match").that.it.has.key("If-None-Match".toLowerCase());
	report.as("Headers contain If-Range").that.it.has.key("If-Range".toLowerCase());
	report.as("Headers contain If-Unmodified-Since").that.it.has.key("If-Unmodified-Since".toLowerCase());
	report.as("Headers contain Max-Forwards").that.it.has.key("Max-Forwards".toLowerCase());
	report.as("Headers contain Origin").that.it.has.key("Origin".toLowerCase());
	report.as("Headers contain Pragma").that.it.has.key("Pragma".toLowerCase());
	report.as("Headers contain Proxy-Authorization").that.it.has.key("Proxy-Authorization".toLowerCase());
	report.as("Headers contain Range").that.it.has.key("Range".toLowerCase());
	report.as("Headers contain Referer").that.it.has.key("Referer".toLowerCase());
	report.as("Headers contain TE").that.it.has.key("TE".toLowerCase());
	report.as("Headers contain User-Agent").that.it.has.key("User-Agent".toLowerCase());
	report.as("Headers contain Upgrade").that.it.has.key("Upgrade".toLowerCase());
	report.as("Headers contain Via").that.it.has.key("Via".toLowerCase());
	report.as("Headers contain Warning").that.it.has.key("Warning".toLowerCase());
	report.as("Headers contain Upgrade-Insecure-Requests").that.it.has.key("Upgrade-Insecure-Requests".toLowerCase());
	report.as("Headers contain X-Requested-With").that.it.has.key("X-Requested-With".toLowerCase());
	report.as("Headers contain DNT").that.it.has.key("DNT".toLowerCase());
	report.as("Headers contain X-Forwarded-For").that.it.has.key("X-Forwarded-For".toLowerCase());
	report.as("Headers contain X-Forwarded-Host").that.it.has.key("X-Forwarded-Host".toLowerCase());
	report.as("Headers contain X-Forwarded-Proto").that.it.has.key("X-Forwarded-Proto".toLowerCase());
	report.as("Headers contain Front-End-Https").that.it.has.key("Front-End-Https".toLowerCase());
	report.as("Headers contain X-Http-Method-Override").that.it.has.key("X-Http-Method-Override".toLowerCase());
	report.as("Headers contain X-ATT-DeviceId").that.it.has.key("X-ATT-DeviceId".toLowerCase());
	report.as("Headers contain X-Wap-Profile").that.it.has.key("X-Wap-Profile".toLowerCase());
	report.as("Headers contain Proxy-Connection").that.it.has.key("Proxy-Connection".toLowerCase());
	report.as("Headers contain X-UIDH").that.it.has.key("X-UIDH".toLowerCase());
	report.as("Headers contain X-Csrf-Token").that.it.has.key("X-Csrf-Token".toLowerCase());
	report.as("Headers contain X-Request-ID").that.it.has.key("X-Request-ID".toLowerCase());
	report.as("Headers contain X-Correlation-ID").that.it.has.key("X-Correlation-ID".toLowerCase());
	report.as("Headers contain Access-Control-Allow-Origin").that.it.has.key("Access-Control-Allow-Origin".toLowerCase());
	report.as("Headers contain Access-Control-Allow-Credentials").that.it.has.key("Access-Control-Allow-Credentials".toLowerCase());
	report.as("Headers contain Access-Control-Expose-Headers").that.it.has.key("Access-Control-Expose-Headers".toLowerCase());
	report.as("Headers contain Access-Control-Max-Age").that.it.has.key("Access-Control-Max-Age".toLowerCase());
	report.as("Headers contain Access-Control-Allow-Methods").that.it.has.key("Access-Control-Allow-Methods".toLowerCase());
	report.as("Headers contain Access-Control-Allow-Headers").that.it.has.key("Access-Control-Allow-Headers".toLowerCase());
	report.as("Headers contain Accept-Patch").that.it.has.key("Accept-Patch".toLowerCase());
	report.as("Headers contain Accept-Ranges").that.it.has.key("Accept-Ranges".toLowerCase());
	report.as("Headers contain Age").that.it.has.key("Age".toLowerCase());
	report.as("Headers contain Allow").that.it.has.key("Allow".toLowerCase());
	report.as("Headers contain Alt-Svc").that.it.has.key("Alt-Svc".toLowerCase());
	report.as("Headers contain Cache-Control").that.it.has.key("Cache-Control".toLowerCase());
	report.as("Headers contain Connection").that.it.has.key("Connection".toLowerCase());
	report.as("Headers contain Content-Disposition").that.it.has.key("Content-Disposition".toLowerCase());
	report.as("Headers contain Content-Encoding").that.it.has.key("Content-Encoding".toLowerCase());
	report.as("Headers contain Content-Language").that.it.has.key("Content-Language".toLowerCase());
	report.as("Headers contain Content-Length").that.it.has.key("Content-Length".toLowerCase());
	report.as("Headers contain Content-Location").that.it.has.key("Content-Location".toLowerCase());
	report.as("Headers contain Content-MD5").that.it.has.key("Content-MD5".toLowerCase());
	report.as("Headers contain Content-Range").that.it.has.key("Content-Range".toLowerCase());
	report.as("Headers contain Content-Type").that.it.has.key("Content-Type".toLowerCase());
	report.as("Headers contain Date").that.it.has.key("Date".toLowerCase());
	report.as("Headers contain ETag").that.it.has.key("ETag".toLowerCase());
	report.as("Headers contain Expires").that.it.has.key("Expires".toLowerCase());
	report.as("Headers contain Last-Modified").that.it.has.key("Last-Modified".toLowerCase());
	report.as("Headers contain Link").that.it.has.key("Link".toLowerCase());
	report.as("Headers contain Location").that.it.has.key("Location".toLowerCase());
	report.as("Headers contain P3P").that.it.has.key("P3P".toLowerCase());
	report.as("Headers contain Pragma").that.it.has.key("Pragma".toLowerCase());
	report.as("Headers contain Proxy-Authenticate").that.it.has.key("Proxy-Authenticate".toLowerCase());
	report.as("Headers contain Public-Key-Pins").that.it.has.key("Public-Key-Pins".toLowerCase());
	report.as("Headers contain Retry-After").that.it.has.key("Retry-After".toLowerCase());
	report.as("Headers contain Server").that.it.has.key("Server".toLowerCase());
	report.as("Headers contain Set-Cookie").that.it.has.key("Set-Cookie".toLowerCase());
	report.as("Headers contain Strict-Transport-Security").that.it.has.key("Strict-Transport-Security".toLowerCase());
	report.as("Headers contain Trailer").that.it.has.key("Trailer".toLowerCase());
	report.as("Headers contain Transfer-Encoding").that.it.has.key("Transfer-Encoding".toLowerCase());
	report.as("Headers contain Tk").that.it.has.key("Tk".toLowerCase());
	report.as("Headers contain Upgrade").that.it.has.key("Upgrade".toLowerCase());
	report.as("Headers contain Vary").that.it.has.key("Vary".toLowerCase());
	report.as("Headers contain Via").that.it.has.key("Via".toLowerCase());
	report.as("Headers contain Warning").that.it.has.key("Warning".toLowerCase());
	report.as("Headers contain WWW-Authenticate").that.it.has.key("WWW-Authenticate".toLowerCase());
	report.as("Headers contain X-Frame-Options").that.it.has.key("X-Frame-Options".toLowerCase());
	server.close();
});